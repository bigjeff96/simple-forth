* Features of the language [6/20]
** DONE Make the parser work with newlines, tabs and too  much whitespace
** DONE Rewrite the lexer (or something, who knows) such as to deal with the function hach map
** DONE Have a hash-map of functions, so as to have lookups of function definitions during runtime
*** DONE in the hash map have already the built-in functions in them
** DONE Have branching address depend on if its in a function or not
** DONE Be able to define functions
** DONE recursive functions
** TODO Have statements in the language (ie forget about having an interpreter)
*** Look at the tsoding video to see how he implements the if else branching
** TODO Be able to store negative values on the stack
** TODO Be able to define labels (like constants?) used for branching
** TODO Have parsing errors whith line-number and column number
** TODO strings
** TODO be able to make comments within comments
** TODO compile to assembly starting here
** TODO Be able to define variables
** TODO read from stdin
** TODO bool
** TODO floats
** TODO arrays
** TODO structs
** TODO dynamic memory

* Things for the project [0/3]
** TODO Setup testing (compare output from language to expected output)
** TODO Make it easy to make a new test
** TODO Check if there is a bug (sometimes we don't get output from the calculations)

* Things to think about
** Have the built-in words just be keywords, that way theres no need to do unnecessary lookups
** Would be really cool if at some point one can define an arena to make allocations on
** Be able to read and write to files
** TODO I just realised that my "lexer" isn't really a lexer, its a lexer and a parser at the same time. I am over-complicating the problem by doing all at the same timez

